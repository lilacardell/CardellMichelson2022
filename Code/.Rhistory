ungroup()%>%
group_by(country,market_type)%>%
filter(n_distinct(market)>=m)%>%
ungroup()%>%
dplyr::select(1:6,hmin2,hmax2,lmin2,lmax2,minreturns2,maxreturns2_c,noarb2_min,noarb2_max,yield_kgha)
season2=returns_con%>%
filter(is.finite(minreturns2))%>%
group_by(country,region,commodity,market_type,market)%>%
filter(n()>=y)%>%
ungroup()%>%
group_by(country,market_type)%>%
filter(n_distinct(market)>=m)%>%
ungroup()%>%
dplyr::select(1:6,hmin2,hmax2,lmin2,lmax2,minreturns2,maxreturns2,noarb2_min,noarb2_max,yield_kgha)
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
include = FALSE,
root.dir = "C:/Users/lilac2/Box/GIEWS_Project/GIEWS/R"
)
options(scipen=999,warn=-1)
set.seed(101484)
###  Check for and load Packages   ###
#writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
## Clear worksace
rm(list = ls())
gc()
## This function will check if a package is installed, and if not, install it
pkgTest  =  function(x) {
if (!require(x, character.only = TRUE))
{
install.packages(x, dep = TRUE)
if(!require(x, character.only = TRUE)) stop("Package not found")
}
}
## These lines load the required packages
packages  =  c('data.table','tidyverse','haven','foreign','stargazer','lubridate','knitr','xtable','tables','kableExtra','car','stringr','styler','readxl','magrittr','sjmisc','ggplot2','ggpubr','ggnewscale','bookdown','scales','quantmod','distr6','plyr','esquisse','forcats','ggrepel','gdata','stringdist','SparseM','quantreg','mfx','erer','margins','moments','rnaturalearth','DescTools','tseries','blorr','janitor','BBmisc')
## you can add more packages here
lapply(packages, pkgTest)
rm(packages,pkgTest)
setwd("c:/Users/lilac2/Box/GIEWS_Project/GIEWS/Final")
maize_prices<-read_dta("./Data/maizeprices_260821.dta")
# of markets per country with any price data
# of years per market
# of months
marketstats=maize_prices%>%
filter(market_type=="Retail")%>%
group_by(country,commodity,market_type,region,market,year)%>% #
dplyr::mutate(n_mo=n_distinct(month))%>%
ungroup()%>%
group_by(country,commodity,market_type,region,market)%>%
dplyr::mutate(n_yr=n_distinct(year))%>%
ungroup()%>%
group_by(country,commodity,market_type)%>%
dplyr::summarise(n_years=n_distinct(year),n_mkt=n_distinct(market),n_mkt5yr=n_distinct(market[n_yr>=5]),
n_mktfullyr=n_distinct(market[n_mo==12]),n_mkt9mo=n_distinct(market[n_mo>=9]))%>%
ungroup()%>%
adorn_totals(fill=" ",name="Total")
###print if necessary
missingcpi=maize_prices%>%#3029 observations from Somalia and 2224 observations from 2021
filter(is.na(price_real))
missingyield=maize_prices%>%#140 observations from South Sudan and 965 observations from Niger in 2020/2021
filter(is.na(yield_kgha))
#eliminate the observations missing real prices and other errors
maize<-maize_prices%>%
filter(!is.na(price_real))%>%
filter(!(market=="Kirundo"&year==2015&month==1&commodity=="Maize (white)"&market_type=="Retail")) #error in WFP dataset with price=1
rm(missingcpi,missingyield)
setwd("C:/Users/lilac2/Box/GIEWS_Project/GIEWS/Final/Output/")
markets=maize%>%
dplyr::select(country,market,market_type,lat,lon)%>%
mutate(country=gsub("Democratic Republic of the Congo","DR Congo",country))%>%
mutate(country=gsub("Central African Republic","CAR",country))
countries=markets%>%
group_by(country)%>%
dplyr::summarise(across(lat:lon,mean))
world <- ne_countries(scale = "medium", returnclass = "sf")
ggplot(data = world) +
geom_sf(fill="antiquewhite") +
geom_point(data=markets, aes(x = lon, y = lat,fill=market_type), size = 1,
shape = 23)+
geom_label_repel(data = countries, aes(x=lon,y=lat, label = country), size =2,nudge_x= 0.15,
direction    = "y",
segment.size = 0.2)+
coord_sf(xlim = c(-20,50), ylim = c(-35, 25))+
theme(panel.grid.major = element_line(color = gray(0.5), linetype = "dashed",
size = 0.25), panel.background = element_rect(fill = "aliceblue"),
legend.position=c(0.35,0.35),legend.background = element_rect(fill="aliceblue"),legend.title=element_blank(),
axis.text.x=element_blank(),axis.ticks.x=element_blank(),axis.title.x=element_blank(),
axis.text.y=element_blank(),axis.ticks.y=element_blank(),axis.title.y=element_blank())
ggsave("market_map.PNG",width=12,height=9)
rm(markets,countries,world)
#Reminder: note h1x,h2x,p1x,p2x if planting or harvest seasons that cross the end of the year, e.g. harvest starts in Dec and ends in Jan
maize<-maize%>%
mutate(
#endharvest1=if_else(month==main_harvest_end,main_harvest_end,as.numeric(NA)),
#    endharvest2=if_else(month==second_harvest_end,second_harvest_end,as.numeric(NA)),
#   beginharvest1=if_else(month==main_harvest_start,main_harvest_start,as.numeric(NA)),
#  beginharvest2=if_else(month==second_harvest_start,second_harvest_start,as.numeric(NA)),
yyyymm=paste(year,formatC(month,width=2,flag="0"),sep="-"))%>%
mutate(monthtype1=if_else(note_p1x==0&month>=main_plant_start & month<=main_plant_end,paste0("planting1_",year),#for nonwrapped planting season
if_else(note_p1x==1&month>=main_plant_start,paste0("planting1_",year), #for months at the end of the year
if_else(note_p1x==1&month<=main_plant_end,paste0("planting1_",year-1), #assume months at the beginning of the year belong with prior year's planting season
if_else(note_h1x==0&month>=main_harvest_start & month<=main_harvest_end,paste0("harvest1_",year),#for nonwrapped harvest season
if_else(note_h1x==1&month>=main_harvest_start,paste0("harvest1_",year), #for months at the end of the year
if_else(note_h1x==1&month<=main_harvest_end,paste0("harvest1_",year-1),"")))))),#assume months at the beginning of the year belong with prior year's harvest season
monthtype2=if_else(note_p2x==0&month>=second_plant_start & month<=second_plant_end,paste0("planting2_",year), #for nonwrapped planting season
if_else(note_p2x==1&month>=second_plant_start,paste0("planting2_",year), #for months at the end of the year
if_else(note_p2x==1&month<=second_plant_end,paste0("planting2_",year-1), #for months at the beginning of the year
if_else(note_h2x==0&month>=second_harvest_start & month<=second_harvest_end,paste0("harvest2_",year),#for nonwrapped harvest season
if_else(note_h2x==1&month>=second_harvest_start,paste0("harvest2_",year), #for months at the end of the year
if_else(note_h2x==1&month<=second_harvest_end,paste0("harvest2_",year-1),"")))))))%>% #for months at the beginning of the year
mutate(date=parse_date_time(yyyymm,"ym"))%>%
dplyr::select(country,region,market,lat,lon,commodity,market_type,currency,year,month,price_real,yield_kgha,monthtype1,monthtype2,note_1,note_2,contains("harvest"),date,-harvestarea_ha)
yield=maize%>%
dplyr::select(country,year,yield_kgha)%>%
group_by(country,year)%>%
slice(1)%>%
ungroup()
#isolate the month of harvest begin for the main season and make a full set for all years and markets
beginharvest1=maize%>%
unite("temp",c("country","region","market","commodity","market_type","main_harvest_start"),sep="_")%>%
dplyr::select(temp)%>%
group_by(temp)%>%
slice(1)%>%
ungroup()
years=seq(2000,2021,by=1)
beginharvest1=expand.grid(beginharvest1$temp,years,stringsAsFactors = TRUE)%>%
separate("Var1",c("country","region","market","commodity","market_type","main_harvest_start"),sep="_")%>%
mutate(hbegin1=paste(Var2,formatC(main_harvest_start,width=2,flag="0"),sep="-"))%>%
mutate(hbegin_date1=parse_date_time(hbegin1,"ym"))%>%
dplyr::select(1:5,hbegin_date1)
#repeat for second season
beginharvest2=maize%>%
unite("temp",c("country","region","market","commodity","market_type","second_harvest_start"),sep="_")%>%
dplyr::select(temp)%>%
group_by(temp)%>%
slice(1)%>%
ungroup()
beginharvest2=expand.grid(beginharvest2$temp,years,stringsAsFactors = TRUE)%>%
separate("Var1",c("country","region","market","commodity","market_type","second_harvest_start"),sep="_")%>%
mutate(hbegin2=paste(Var2,formatC(second_harvest_start,width=2,flag="0"),sep="-"))%>%
mutate(hbegin_date2=parse_date_time(hbegin2,"ym"))%>%
dplyr::select(1:5,hbegin_date2)
rm(years)
#Note_1/2==1 means main/second planting season occurs before main/second harvest season in a calendar year,as analysis is harvest==>planting/lean, so shift lean season crop year
#rejoin the harvest month begin and identify the three months prior to harvest, and the maximum price during that period and calculate returns
lean1=maize%>%
left_join(beginharvest1,by=c("country","region","market","commodity","market_type"))%>%
mutate(duration1=interval(hbegin_date1,date))%>%
mutate(duration1=duration1%/%months(1))%>%
filter(duration1%in%-3:-1)%>%
mutate(monthtype1=if_else(note_1==0,paste0("lean1_",year(hbegin_date1)),paste0("lean1_",year(hbegin_date1)-1)))%>%
group_by(country,region,commodity,market_type,market,monthtype1)%>% #group by crop year to find the price within the lean seasons for that crop year
dplyr::summarise(lmax1=max(price_real,na.rm=TRUE),lmin1=min(price_real,na.rm=TRUE))%>%
ungroup()%>%
unite("temp",c("country","region","market","commodity","market_type"),sep="_")%>%
separate(monthtype1,c("monthtype1","cropyear"),"_")%>%
mutate(cropyear=as.numeric(cropyear))%>%
dplyr::select(temp,cropyear,lmax1,lmin1)
#repeat for second season
lean2=maize%>%
left_join(beginharvest2,by=c("country","region","market","commodity","market_type"))%>%
mutate(duration2=interval(hbegin_date2,date))%>%
mutate(duration2=duration2%/%months(1))%>%
filter(duration2%in%-3:-1)%>%
mutate(monthtype2=if_else(note_2==0,paste0("lean2_",year(hbegin_date2)),paste0("lean2_",year(hbegin_date2)-1)))%>%
group_by(country,region,commodity,market_type,market,monthtype2)%>% #group by crop year to find the price within lean months for that crop year
dplyr::summarise(lmax2=max(price_real,na.rm=TRUE),lmin2=min(price_real,na.rm=TRUE))%>%
ungroup()%>%
unite("temp",c("country","region","market","commodity","market_type"),sep="_")%>%
separate(monthtype2,c("monthtype2","cropyear"),"_")%>%
mutate(cropyear=as.numeric(cropyear))%>%
dplyr::select(temp,cropyear,lmax2,lmin2)
#find min and max harvest price (main season)
harvest1 = maize%>%
separate(monthtype1,c("monthtype1","cropyear"),"_")%>%
mutate(cropyear=as.numeric(cropyear))%>%
filter(monthtype1=="harvest1")%>% #find all the harvest months for the main season
arrange(country,region,commodity,market_type,market,year,month)%>%
group_by(country,region,commodity,market_type,market,cropyear,monthtype1)%>% #group by crop year to find the price within harvest months for that crop year
dplyr::summarise(minprice=min(price_real,na.rm=TRUE),maxprice=max(price_real,na.rm=TRUE))%>%
ungroup()%>%
unite("temp",c("country","region","market","commodity","market_type"),sep="_")%>%
pivot_wider(names_from = monthtype1,values_from=c("minprice","maxprice"))%>%
dplyr::rename(hmin1=minprice_harvest1,hmax1=maxprice_harvest1)%>%
dplyr::select(temp,cropyear,hmin1,hmax1)
#find min and max harvest price (second season)
harvest2 = maize%>%
separate(monthtype2,c("monthtype2","cropyear"),"_")%>%
mutate(cropyear=as.numeric(cropyear))%>%
filter(monthtype2=="harvest2")%>% #find all the harvest months for the main season
arrange(country,region,commodity,market_type,market,year,month)%>%
group_by(country,region,commodity,market_type,market,cropyear,monthtype2)%>% #group by crop year to find the price within harvest months for that crop year
dplyr::summarise(minprice=min(price_real,na.rm=TRUE),maxprice=max(price_real,na.rm=TRUE))%>%
ungroup()%>%
unite("temp",c("country","region","market","commodity","market_type"),sep="_")%>%
pivot_wider(names_from = monthtype2,values_from=c("minprice","maxprice"))%>%
dplyr::rename(hmin2=minprice_harvest2,hmax2=maxprice_harvest2)%>%
dplyr::select(temp,cropyear,hmin2,hmax2)
###connect and calculate returns
returns1=full_join(lean1,harvest1,by=c("temp","cropyear"))%>%
mutate(minreturns1=(lmax1-hmin1)/hmin1,maxreturns1=(lmin1-hmax1)/hmax1,  #calculate max and min returns
noarb1_min=if_else(lmax1<=hmin1,1,0),noarb1_max=if_else(lmin1<=hmax1,1,0))
#repeat for second season
returns2=full_join(lean2,harvest2,by=c("temp","cropyear"))%>%
mutate(minreturns2=(lmax2-hmin2)/hmin2,maxreturns2=(lmin2-hmax2)/hmax2,  #calculate returns
noarb2_min=if_else(lmax2<=hmin2,1,0),noarb2_max=if_else(lmin2<=hmax2,1,0))
#rejoin the returns
returns_con=full_join(returns1,returns2,by=c("temp","cropyear"))%>%
separate("temp",c("country","region","market","commodity","market_type"),sep="_")%>%
arrange(country,region,market,commodity,market_type,cropyear)%>%
left_join(yield,by=c("country","cropyear"="year"))
rm(harvest1,harvest2,lean1,lean2,beginharvest1,beginharvest2)
#isolate the month of harvest end for the main season and determine the price decile for the country and market type
harvest1 = maize%>%
separate(monthtype1,c("monthtype1","cropyear"),"_")%>%
mutate(cropyear=as.numeric(cropyear))%>%
filter(monthtype1=="harvest1")%>% #find all the harvest months for the main season
arrange(country,region,commodity,market_type,market,year,month)%>%
group_by(country,region,commodity,market_type,market,cropyear,monthtype1)%>% #group by crop year to find the price within harvest months for that crop year
dplyr::summarise(hend1=last(price_real,na.rm=TRUE),hend1_month=month[BBmisc::which.last(hend1==price_real)])%>%
ungroup()%>%
group_by(country,commodity,market_type)%>%
dplyr::mutate(z_h1=scale(hend1),h1_d=as.factor(paste0("d",ntile(hend1,10))))%>%
ungroup()%>%
mutate(hend=paste(cropyear,formatC(hend1_month,width=2,flag="0"),sep="-"))%>%
mutate(hend_date1=parse_date_time(hend,"ym"))%>%
dplyr::select(country,region,market,commodity,market_type,cropyear,hend_date1,hend1,z_h1,h1_d)
#repeat for second season
harvest2 = maize%>%
separate(monthtype2,c("monthtype2","cropyear"),"_")%>%
mutate(cropyear=as.numeric(cropyear))%>%
filter(monthtype2=="harvest2")%>% #find all the harvest months for the second season
arrange(country,region,commodity,market_type,market,year,month)%>%
group_by(country,region,commodity,market_type,market,cropyear,monthtype2)%>% #group by crop year to find the price within harvest months for that crop year
dplyr::summarise(hend2=last(price_real,na.rm=TRUE),hend2_month=month[BBmisc::which.last(hend2==price_real)])%>%
ungroup()%>%
group_by(country,commodity,market_type)%>%
dplyr::mutate(z_h2=scale(hend2),h2_d=as.factor(paste0("d",ntile(hend2,10))))%>%
ungroup()%>%
mutate(hend=paste(cropyear,formatC(hend2_month,width=2,flag="0"),sep="-"))%>%
mutate(hend_date2=parse_date_time(hend,"ym"))%>%
dplyr::select(country,region,market,commodity,market_type,cropyear,hend_date2,hend2,z_h2,h2_d)
decile=c("d1","d2","d3","d4","d5","d6","d7","d8","d9","d10")
harvest1$h1_d<-reorder.factor(harvest1$h1_d,new.order=decile)
harvest2$h2_d<-reorder.factor(harvest2$h2_d,new.order=decile)
#rejoin the harvest month end and calculate returns for every month from the harvest end, keeping only the months within a year after harvest, and calculate returns
returns_dur1=maize%>%
left_join(harvest1,by=c("country","region","market","commodity","market_type"))%>%
mutate(duration1=interval(hend_date1,date),returns1=(price_real-hend1)/hend1,arb1=if_else(price_real>hend1,1,0))%>%
mutate(duration1=duration1%/%months(1),noarb1=if_else(arb1==0,1,0),cropyear1=cropyear)%>%
filter(duration1%in%1:12)%>%
dplyr::select(-lat,-lon,-currency,-note_1,-note_2,-contains("_harvest_"),-contains("monthtype"),-cropyear)
#repeat for second season
returns_dur2=maize%>%
left_join(harvest2,by=c("country","region","market","commodity","market_type"))%>%
mutate(duration2=interval(hend_date2,date),returns2=(price_real-hend2)/hend2,arb2=if_else(price_real>hend2,1,0))%>%
mutate(duration2=duration2%/%months(1),noarb2=if_else(arb2==0,1,0),cropyear2=cropyear)%>%
filter(duration2%in%1:12)%>%
dplyr::select(-lat,-lon,-currency,-note_1,-note_2,-contains("_harvest_"),-contains("monthtype"),-cropyear)
#rejoin the returns
returns_dur=full_join(returns_dur1,returns_dur2,by=c("country","region","market","commodity","market_type","year","month","price_real","yield_kgha","date"))%>%
arrange(country,region,market,commodity,year,month)
rm(harvest1,harvest2,returns_dur1,returns_dur2)
setwd("C:/Users/lilac2/Box/GIEWS_Project/GIEWS/Final/Output/")
####side note to consider missing data
missing1=returns1%>%
separate("temp",c("country","region","market","commodity","market_type"),sep="_")%>%
filter(market_type=="Retail")%>%
mutate(status=if_else(is.finite(hmin1)&is.finite(lmax1),"both prices exist",
if_else(is.na(hmin1)&is.finite(lmax1),"no harvest price",
if_else(is.finite(hmin1)&is.na(lmax1),"no lean price","neither"))),
returns_yn=if_else(is.finite(minreturns1),1,0),country=as.factor(country))%>%
mutate(country=revalue(country,c("Democratic Republic of the Congo"="DR Congo","Central African Republic"="CAR")))%>%
dplyr::select(country,status,minreturns1,returns_yn)
#avg returns
missing_m1=missing1%>%
group_by(country)%>%
dplyr::summarise(meanreturn=mean(minreturns1,na.rm=TRUE))%>%
ungroup()
missing_mm=missing_m1%>%
add_row(country="Overall average",meanreturn=mean(missing1$minreturns1,na.rm=TRUE))%>%
dplyr::mutate(across(contains("return"),~paste0(sprintf("%.1f",.*100),"%")))
missing1$country=fct_infreq(missing1$country)
t=missing1%>%
tabyl(country,status)%>%
adorn_totals(c("row","col"))%>%
adorn_percentages("row") %>%
adorn_pct_formatting(digits = 0) %>%
adorn_ns()%>%
as.tibble()%>%
full_join(missing_mm,by="country")
missing_m1$meanreturn=missing_m1$meanreturn*100
ggplot()+
geom_bar(data=missing1,aes(x=country,stat="identity",fill=status))+
scale_fill_manual(values=c("gray","pink","purple"),breaks=c("both prices exist","no harvest price","no lean price"),labels=c("both prices exist","no harvest price","no lean price"),name="* average returns (%)")+
geom_point(data=missing_m1,aes(x=country,y=meanreturn*10),size=3,shape=8)+
scale_y_continuous(name="Count of crop years",sec.axis=sec_axis(trans~./10,name=""),expand=c(0,0),limits=c(0,1400))+
theme(axis.text.x = element_text(angle = 45, hjust = 1),panel.background = element_blank(),
axis.line = element_line(colour = "black"),panel.grid.major.y = element_line(colour = "black"),panel.grid.minor.y = element_line(colour = "black"))
ggsave("missingness.PNG",width=12,height=9)
#minyears of data (y) and min number of markets (m)
y=5
m=10
## Duration (FULL SET) data set for primary maize season
duration1=returns_dur%>%
filter(is.finite(returns1))%>%
group_by(country,region,commodity,market_type,market,duration1)%>%
filter(n()>=y)%>%
ungroup()%>%
group_by(country,commodity,market_type,duration1)%>%
filter(n_distinct(market)>=m)%>%
ungroup()
#Duration (MARKET LEVEL)
duration1_mkt=duration1%>%
group_by(country,region,commodity,market_type,market,duration1)%>%
dplyr::summarise(returns_m=mean(returns1),
n_season=n(),n_neg=sum(noarb1))%>%
ungroup()%>%
mutate(pct_season=n_neg/n_season)%>%
dplyr::select(-n_neg)
## Seasonal returns for primary and second maize season data set
season1=returns_con%>%
filter(is.finite(minreturns1))%>%
group_by(country,region,commodity,market_type,market)%>%
filter(n()>=y)%>%
ungroup()%>%
group_by(country,commodity,market_type)%>%
filter(n_distinct(market)>=m)%>%
ungroup()%>%
dplyr::select(1:6,hmin1,hmax1,lmin1,lmax1,minreturns1,maxreturns1,noarb1_min,noarb1_max,yield_kgha)
season2=returns_con%>%
filter(is.finite(minreturns2))%>%
group_by(country,region,commodity,market_type,market)%>%
filter(n()>=y)%>%
ungroup()%>%
group_by(country,market_type)%>%
filter(n_distinct(market)>=m)%>%
ungroup()%>%
dplyr::select(1:6,hmin2,hmax2,lmin2,lmax2,minreturns2,maxreturns2,noarb2_min,noarb2_max,yield_kgha)
View(season2)
View(season1)
View(returns_con)
View(returns_dur)
View(returns_con)
season=season1%>%
full_join(season2,by=c("country","region","commodity","market","market_type","cropyear","yield_kgha"))
View(season)
season_mkt=season%>%
group_by(country,region,commodity,market_type,market)%>%
dplyr::summarise(across(contains("returns"),list(e=mean),na.rm=TRUE,.names = "{.fn}.{.col}"),
across(starts_with("noarb"),~sum(.x,na.rm=TRUE),.names = "n_season_{.col}"),
n.yrs1=length(cropyear[is.finite(minreturns1)]),n.yrs2=length(cropyear[is.finite(minreturns2)]))%>%
ungroup()%>%
mutate(pct_season1=n_season_noarb1/n.yrs1,pct_season1_c=n_season_noarb1_c/n.yrs1,
pct_season2=n_season_noarb2/n.yrs2,pct_season2_c=n_season_noarb2_c/n.yrs2)%>%
dplyr::select(-contains("n_"))
#Seasonal returns (MARKET LEVEL)
season_mkt=season%>%
group_by(country,region,commodity,market_type,market)%>%
dplyr::summarise(across(contains("returns"),list(e=mean),na.rm=TRUE,.names = "{.fn}.{.col}"),
across(starts_with("noarb"),~sum(.x,na.rm=TRUE),.names = "n_season_{.col}"),
n.yrs1=length(cropyear[is.finite(minreturns1)]),n.yrs2=length(cropyear[is.finite(minreturns2)]))%>%
ungroup()%>%
mutate(pct_season1_min=n_season_noarb1_min/n.yrs1,pct_season1_max=n_season_noarb1_max/n.yrs1,
pct_season2_min=n_season_noarb2_min/n.yrs2,pct_season2_max=n_season_noarb2_max/n.yrs2)%>%
dplyr::select(-contains("n_"))
View(season_mkt)
pctp=function(x){
y=mean(x[x>0],na.rm=TRUE)
}
pctn=function(x){
y=mean(x[x<=0],na.rm=TRUE)
}
#Seasonal returns (COUNTRYLEVEL)
season_country=season%>%
group_by(country,commodity,market_type)%>%
dplyr::summarise(across(contains("returns"),list(e=mean,pos=~pctp(.x),neg=~pctn(.x)),na.rm=TRUE,.names = "{.fn}.{.col}"),
across(contains("noarb"),~sum(.x,na.rm=TRUE),.names = "n_season_{.col}"),
n.mkt1=n_distinct(market[is.finite(minreturns1)]),n.mkt2=n_distinct(market[is.finite(minreturns2)]),
n.yrs1=length(market[is.finite(minreturns1)]),n.yrs2=length(market[is.finite(minreturns2)]))%>%
ungroup()%>%
mutate(pct_season1_min=n_season_noarb1_min/n.yrs1,pct_season1_max=n_season_noarb1_max/n.yrs1,
pct_season2_min=n_season_noarb2_min/n.yrs2,pct_season2_max=n_season_noarb2_max/n.yrs2)%>%
dplyr::select(-starts_with("n_"))
#make a list of years covered
all_years=season%>%
arrange(country,market_type,cropyear)%>%
group_by(country,market_type)%>%
dplyr::summarise(minyr=min(cropyear),maxyr=max(cropyear))%>%
mutate(years=paste(minyr,maxyr,sep="-"))%>%
dplyr::select(country,market_type,years)%>%
ungroup()
#add list of years to country data
season_country=season_country%>%
left_join(all_years,by=c("country","market_type"))%>%
dplyr::select(country,commodity,market_type,years,contains("1"),contains("2"))
View(season_country)
mlist=unlist(season_mkt%>%distinct(country,region,commodity,market_type,market)%>%unite("z",1:5,sep="_"))
skew_mkt=maize%>%
unite("z",country,region,commodity,market_type,market,sep="_")%>%
filter(z%in%mlist)%>%
separate(z,c("country","region","commodity","market_type","market"),sep="_")%>%
group_by(country,market,market_type)%>%
dplyr::summarise(nobs=n(),cv=(mean(price_real)/sd(price_real)),
skew=skewness(price_real),kurt=kurtosis(price_real))%>%
mutate(n_skew=if_else(skew<=0,1,0),n_kurt=if_else(kurt<=0,1,0))
#no evidence of negative kurtosis in any markets
skew_country=skew_mkt%>%
group_by(country,market_type)%>%
dplyr::summarise(across(c(cv,kurt,skew),mean,na.rm=TRUE),across(starts_with("n"),sum,na.rm=TRUE),n_mkt=n())%>%
dplyr::mutate(n_skew_pct=n_skew/n_mkt,n_kurt_pct=n_kurt/n_mkt)%>%
dplyr::mutate(across(c(n_skew_pct,n_kurt_pct),~paste0(sprintf("%.1f",.*100),"%")),
across(c(cv,skew,kurt),round,3))%>%
ungroup()%>%
dplyr::select(country,market_type,n_mkt,skew,n_skew_pct)
#KPSS test for stationarity
extreme1_mkt=season%>%
unite("z",country,region,commodity,market_type,market,sep="_")%>%
filter(z%in%mlist)%>%
separate(z,c("country","region","commodity","market_type","market"),sep="_")%>%
filter(market_type=="Retail"&is.finite(returns1_c))%>%
unite("c_mkt",c("country","market"))%>%
group_by(c_mkt)%>%
arrange(c_mkt,cropyear)%>%
dplyr::summarise(pval=ifelse(n()<=3,as.numeric(NA),kpss.test(ts(returns1_c))$p.value))
extreme1_mkt=season%>%
unite("z",country,region,commodity,market_type,market,sep="_")%>%
filter(z%in%mlist)%>%
separate(z,c("country","region","commodity","market_type","market"),sep="_")%>%
filter(market_type=="Retail"&is.finite(minreturns1))%>%
unite("c_mkt",c("country","market"))%>%
group_by(c_mkt)%>%
arrange(c_mkt,cropyear)%>%
dplyr::summarise(pval=ifelse(n()<=3,as.numeric(NA),kpss.test(ts(returns1_c))$p.value))
extreme1_mkt=season%>%
unite("z",country,region,commodity,market_type,market,sep="_")%>%
filter(z%in%mlist)%>%
separate(z,c("country","region","commodity","market_type","market"),sep="_")%>%
filter(market_type=="Retail"&is.finite(minreturns1))%>%
unite("c_mkt",c("country","market"))%>%
group_by(c_mkt)%>%
arrange(c_mkt,cropyear)%>%
dplyr::summarise(pval=ifelse(n()<=3,as.numeric(NA),kpss.test(ts(minreturns1))$p.value))
nrow(subset(extreme1_mkt,pval<0.05))
cb1=season_mkt%>%
filter(market_type=="Retail"&is.finite(e.minreturns1))
cb1plot=ggplot()+
geom_point(data=cb1,aes(x=pct_season1_min*100,y=e.minreturns1*100,size=n.yrs1))+ scale_y_continuous(name="Average returns to storage (%)",limits=c(-50,150),breaks=seq(-50,150,50),expand=c(0,0)) +  scale_x_continuous(name="% of seasons with negative returns",limits=c(0,100),breaks=seq(0,100,20)) +
theme(panel.grid.minor = element_blank(),panel.background = element_blank(),panel.grid.major = element_line(color="lightgray"),legend.position = c(1, 1),legend.justification = c(1, 1),
axis.line = element_line(color="black"))+guides(size = guide_legend(reverse = TRUE))+
geom_hline(yintercept=0,color="darkgray")+ scale_size(range = c(0.5,3),breaks=c(2,4,8,12,16,20),name="Number of \n market-years")
print(cb1plot)
View(cb1)
neg_all=cb1%>%filter(pct_season1_min==1) #0
pos_all=cb1%>%filter(pct_season1_min==0) #44
neg_country=unique(neg_all$country) #1 country
pos_country=unique(pos_all$country) #9 different countries
neg_market=unique(neg_all$market) #1 market
pos_market=unique(pos_all$market) #44 different markets
neg_all=season%>%filter(market%in%neg_market)#6 total observations for that 1 markets
pos_all=season%>%filter(market%in%pos_market)#374 total observations for those 72 markets
neg_year=unique(neg_all$cropyear) #6 different years
pos_year=unique(pos_all$cropyear) #21 different years
dot= ggplot()+geom_jitter(data=subset(season,market_type=="Retail"),aes(x=factor(cropyear),y=returns1_min*100,color=yield_kgha),size=1.0,alpha=0.75)+ #geom_hline(yintercept=0,color="red",position="identity")+
scale_color_gradient2(low="gray80",high="gray10",na.value="gray",name="Yield (kg/ha)",limits=c(0,6000))+
#scale_color_gradient2(low="chartreuse",high="darkgreen",na.value="gray",name="Yield (kg/ha)",limits=c(0,4000))+
scale_y_continuous(name="Returns to storage (%)",limits=c(-100,500),breaks=seq(-100,500,100),expand=c(0,0))+
scale_x_discrete(name="Year",breaks=c("2000","2004","2008","2012","2016","2020"),labels=c("2000","2004","2008","2012","2016","2020"),expand=c(0,0))+
geom_hline(yintercept=0,color="red",position="identity")+
theme(panel.grid.major = element_line(color="lightgray"),panel.grid.minor = element_blank(), panel.background = element_blank(),axis.line = element_line(color="black"),legend.position = c(1, 1),legend.justification = c(1, 1))
#geom_jitter(data=subset(time,dpct<=0),aes(x=year, y=dpct,color="red",size=yield_kgha),alpha=0.5)+
#geom_jitter(data=subset(time,dpct>0),aes(x=year,y=dpct,color="black",size=yield_kgha),alpha=0.5)+
#scale_color_manual(values=c("black","red")) +
#scale_y_continuous(name="Seasonal Returns (%)",limits=c(-100,500),breaks=seq(-100,500,100))+
# geom_text(data=time,aes(x=2010,y=450,label="High Planting Price, Low Harvest Price",color="black"),size=4)+
# geom_text(data=time,aes(x=2010,y=-95,label="High Harvest Price, Low Planting Price",color="red"),size=4)
print(dot)
dot= ggplot()+geom_jitter(data=subset(season,market_type=="Retail"),aes(x=factor(cropyear),y=minreturns1*100,color=yield_kgha),size=1.0,alpha=0.75)+ #geom_hline(yintercept=0,color="red",position="identity")+
scale_color_gradient2(low="gray80",high="gray10",na.value="gray",name="Yield (kg/ha)",limits=c(0,6000))+
#scale_color_gradient2(low="chartreuse",high="darkgreen",na.value="gray",name="Yield (kg/ha)",limits=c(0,4000))+
scale_y_continuous(name="Returns to storage (%)",limits=c(-100,500),breaks=seq(-100,500,100),expand=c(0,0))+
scale_x_discrete(name="Year",breaks=c("2000","2004","2008","2012","2016","2020"),labels=c("2000","2004","2008","2012","2016","2020"),expand=c(0,0))+
geom_hline(yintercept=0,color="red",position="identity")+
theme(panel.grid.major = element_line(color="lightgray"),panel.grid.minor = element_blank(), panel.background = element_blank(),axis.line = element_line(color="black"),legend.position = c(1, 1),legend.justification = c(1, 1))
#geom_jitter(data=subset(time,dpct<=0),aes(x=year, y=dpct,color="red",size=yield_kgha),alpha=0.5)+
#geom_jitter(data=subset(time,dpct>0),aes(x=year,y=dpct,color="black",size=yield_kgha),alpha=0.5)+
#scale_color_manual(values=c("black","red")) +
#scale_y_continuous(name="Seasonal Returns (%)",limits=c(-100,500),breaks=seq(-100,500,100))+
# geom_text(data=time,aes(x=2010,y=450,label="High Planting Price, Low Harvest Price",color="black"),size=4)+
# geom_text(data=time,aes(x=2010,y=-95,label="High Harvest Price, Low Planting Price",color="red"),size=4)
print(dot)
box= ggplot()+geom_boxplot(data=subset(season,market_type=="Retail"),aes(x=factor(cropyear),y=minreturns1*100),outlier.shape=1,position="dodge") + geom_hline(yintercept=0,color="red",position="identity")+
scale_y_continuous(name="Returns to storage (%)", limits=c(-100,500),breaks=seq(-100,500,100))+ scale_x_discrete(name="Year",breaks=c("2000","2004","2008","2012","2016","2020"))+
theme(panel.grid.major = element_blank(),legend.position="none",panel.grid.minor = element_blank(), panel.background = element_blank(),axis.line = element_line(color="black"))
print(box)
extreme1=season%>%
filter(market_type=="Retail"&is.finite(minreturns1))%>%
group_by(country)%>%
dplyr::mutate(z_h1=scale(hmin1),h1_d=as.factor(paste0("d",ntile(hmin1,10))))%>%
ungroup()
#decile=c("d1","d2","d3","d4","d5","d6","d7","d8","d9","d10")
#extreme1$h1_d<-reorder.factor(extreme1$h1_d,new.order=decile)
extremedot=ggplot()+geom_point(data=extreme1,aes(x=z_h1,y=minreturns1*100,shape=factor(noarb1_min)),alpha=0.5,size=1)+
scale_y_continuous(name="Returns to storage for primary maize season (%)",limits=c(-100,500),breaks=seq(-100,500,100)) +
scale_x_continuous(name="Z-score of harvest price for primary maize season",limits=c(-3,8),breaks=seq(-3,8,1),expand=c(0,0))+
scale_shape_manual(values=c(3,1),breaks=c("0","1"),labels=c("Positive Returns","Negative Returns"),name="Returns to Storage")+
geom_hline(yintercept=0,color="red")+
theme(panel.grid.minor = element_blank(),axis.line = element_line(color="black"),
legend.position = c(0.9, 0.9),legend.justification = c(1, 1))
print(extremedot)
